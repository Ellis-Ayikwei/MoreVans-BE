"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-%u9eljyfg@m8zp&5)u6yv#_m6xbp0_m1!6+h#emx%bbmeo)1@="
OPENWEATHERMAP_API_KEY = os.environ.get("OPENWEATHERMAP_API_KEY", "")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "rest_framework.authtoken",
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",
    "viewflow",
    "corsheaders",
    "channels",
    "apps.Message",
    "apps.Authentication",
    # "apps.backend",
    "apps.Notification",
    "apps.Payment",
    "apps.Provider",
    "apps.Request",
    "apps.User",
    "apps.Vehicle",
    "apps.Driver",
    "apps.Tracking",
    "apps.Location",
    "apps.Bidding",
    "apps.Review",
    "apps.Services",
    "apps.Contract",
    "apps.Basemodel",
    "utils",
    "apps.Job",
    "apps.pricing",
    "apps.CommonItems",
    "apps.RequestItems",
    "apps.JourneyStop",
]

MIDDLEWARE = [
    # 'backend.middle_ware.ConditionalSlashMiddleware',
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "backend.wsgi.application"
ASGI_APPLICATION = "backend.asgi.application"

DATABASES = {
    "default": {
        "ENGINE": "django.contrib.gis.db.backends.postgis",
        "NAME": "morevans",  # database name
        "USER": "postgres",  # database user
        "PASSWORD": "@Toshib123",  # database password
        "HOST": "localhost",  # database host
        "PORT": "5432",  # database port
    }
}

import os
import platform
from ctypes import CDLL

# Detect OS
is_windows = os.name == "nt"
is_linux = os.name == "posix" and platform.system() == "Linux"

if is_windows:
    OSGEO4W = r"C:\OSGeo4W"
    assert os.path.isdir(OSGEO4W), f"Directory does not exist: {OSGEO4W}"

    os.environ["OSGEO4W_ROOT"] = OSGEO4W
    os.environ["GDAL_DATA"] = os.path.join(OSGEO4W, "share", "gdal")
    os.environ["PROJ_LIB"] = os.path.join(OSGEO4W, "share", "proj")
    os.environ["PATH"] = os.path.join(OSGEO4W, "bin") + ";" + os.environ["PATH"]

    # GeoDjango Settings
    GDAL_LIBRARY_PATH = os.path.join(OSGEO4W, "bin", "gdal310.dll")
    GEOS_LIBRARY_PATH = os.environ.get(
        "GEOS_LIBRARY_PATH", os.path.join(OSGEO4W, "bin", "geos_c.dll")
    )
    lib_path = GDAL_LIBRARY_PATH

elif is_linux:
    # You may need to adjust these paths based on how GDAL is installed (e.g. via apt, conda, or custom build)
    os.environ["GDAL_DATA"] = "/usr/share/gdal"
    os.environ["PROJ_LIB"] = "/usr/share/proj"

    # GeoDjango Settings
    GDAL_LIBRARY_PATH = "/usr/lib/libgdal.so"
    GEOS_LIBRARY_PATH = os.environ.get("GEOS_LIBRARY_PATH", "/usr/lib/libgeos_c.so")
    lib_path = GDAL_LIBRARY_PATH

else:
    raise EnvironmentError("Unsupported operating system")

# Load GDAL with ctypes
try:
    gdal_lib = CDLL(lib_path)
    print("GDAL loaded successfully")
except OSError as e:
    print("Error loading GDAL:", e)


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


AUTH_USER_MODEL = "User.User"

# Add custom authentication backends
AUTHENTICATION_BACKENDS = [
    "apps.Authentication.backends.EmailOrPhoneBackend",  # Custom backend for email/phone authentication
    "django.contrib.auth.backends.ModelBackend",  # Default backend as fallback
]

# Table name settings to remove app name prefix
TABLE_NAME_TEMPLATE = "{table_name}"

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework.authentication.TokenAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_THROTTLE_CLASSES": [
        "rest_framework.throttling.AnonRateThrottle",
        "rest_framework.throttling.UserRateThrottle",
    ],
    "DEFAULT_THROTTLE_RATES": {"anon": "100/day", "user": "1000/day"},
    # Configure renderers so that responses are in camelCase.
    "DEFAULT_RENDERER_CLASSES": (
        "rest_framework.renderers.JSONRenderer",
        "rest_framework.renderers.BrowsableAPIRenderer",
    ),
    # Configure parsers so that incoming camelCase keys are converted to snake_case.
    "DEFAULT_PARSER_CLASSES": (
        "rest_framework.parsers.JSONParser",
        "rest_framework.parsers.FormParser",
        "rest_framework.parsers.MultiPartParser",
    ),
}

# JWT Settings
from datetime import timedelta

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=120),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "UPDATE_LAST_LOGIN": True,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "AUTH_HEADER_TYPES": ("Bearer",),
}

if DEBUG:
    CORS_ALLOW_ALL_ORIGINS = True
    CORS_ALLOW_CREDENTIALS = True

# # CORS Settings
# CORS_ALLOWED_ORIGINS = [
#     "http://localhost:3000",
#     "https://your-production-domain.com",
# ]


CORS_ALLOW_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
    "x-refresh-token",
]

# settings.py
# CHANNEL_LAYERS = {
#     "default": {
#         "BACKEND": "channels_redis.core.RedisChannelLayer",
#         "CONFIG": {
#             "hosts": [("redis://127.0.0.1:6379/0")],  # Redis URL format
#         },
#     },
# }

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("172.18.112.22", 6379)],
        },
    },
}

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "INFO",
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "propagate": True,
        },
        "airflow": {
            "handlers": ["console"],
            "level": "WARNING",
            "propagate": False,
        },
    },
}

# --- mailing system setting ----
DEFAULT_FROM_EMAIL = "ellisarmahayikwei@gmail.com"
EMAIL_HOST = "smtp.gmail.com"
EMAIL_PORT = 587
EMAIL_HOST_USER = "ellisarmahayikwei@gmail.com"
EMAIL_HOST_PASSWORD = "trxe mjsy kyhn yurw"
EMAIL_USE_TLS = True


APPEND_SLASH = False

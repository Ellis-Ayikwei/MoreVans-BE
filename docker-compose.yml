# WasteWise Smart Waste Management System
# Docker Compose Configuration
# 
# This file defines all services needed to run the complete system:
# - Django backend with PostGIS
# - React frontend
# - PostgreSQL with PostGIS extension
# - Redis for caching and WebSocket support
# - MQTT broker for IoT communication
# - Celery for background tasks

version: '3.8'

services:
  # PostgreSQL database with PostGIS extension
  postgres:
    image: postgis/postgis:15-3.3
    container_name: wastewise_postgres
    environment:
      POSTGRES_DB: wastewise
      POSTGRES_USER: wastewise_user
      POSTGRES_PASSWORD: wastewise_password
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db_init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - wastewise_network
    restart: unless-stopped

  # Redis for caching and WebSocket support
  redis:
    image: redis:7-alpine
    container_name: wastewise_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - wastewise_network
    restart: unless-stopped

  # Eclipse Mosquitto MQTT broker for IoT devices
  mqtt-broker:
    image: eclipse-mosquitto:2.0
    container_name: wastewise_mqtt
    volumes:
      - ./mqtt/config:/mosquitto/config
      - ./mqtt/data:/mosquitto/data
      - ./mqtt/log:/mosquitto/log
      - mqtt_data:/mosquitto/data
    ports:
      - "1883:1883"  # MQTT port
      - "9001:9001"  # WebSocket port
    networks:
      - wastewise_network
    restart: unless-stopped

  # Django backend application
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: wastewise_backend
    environment:
      - DEBUG=False
      - ENVIRONMENT=production
      - DB_NAME=wastewise
      - DB_USER=wastewise_user
      - DB_PASSWORD=wastewise_password
      - DB_HOST=postgres
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - MQTT_BROKER_HOST=mqtt-broker
      - MQTT_BROKER_PORT=1883
    volumes:
      - media_data:/app/media
      - static_data:/app/staticfiles
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
      - mqtt-broker
    networks:
      - wastewise_network
    restart: unless-stopped
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             python manage.py create_superuser_if_none_exists &&
             daphne -b 0.0.0.0 -p 8000 backend.asgi:application"

  # Celery worker for background tasks
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: wastewise_celery_worker
    environment:
      - DEBUG=False
      - ENVIRONMENT=production
      - DB_NAME=wastewise
      - DB_USER=wastewise_user
      - DB_PASSWORD=wastewise_password
      - DB_HOST=postgres
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - MQTT_BROKER_HOST=mqtt-broker
      - MQTT_BROKER_PORT=1883
    volumes:
      - media_data:/app/media
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
      - mqtt-broker
    networks:
      - wastewise_network
    restart: unless-stopped
    command: celery -A backend worker -l info

  # Celery beat scheduler
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: wastewise_celery_beat
    environment:
      - DEBUG=False
      - ENVIRONMENT=production
      - DB_NAME=wastewise
      - DB_USER=wastewise_user
      - DB_PASSWORD=wastewise_password
      - DB_HOST=postgres
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
    volumes:
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - wastewise_network
    restart: unless-stopped
    command: celery -A backend beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler

  # React frontend application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: wastewise_frontend
    environment:
      - REACT_APP_API_URL=http://localhost:8000/api/v1
      - REACT_APP_WS_URL=ws://localhost:8000/ws
      - REACT_APP_GOOGLE_MAPS_API_KEY=${GOOGLE_MAPS_API_KEY}
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - wastewise_network
    restart: unless-stopped

  # Nginx reverse proxy and load balancer
  nginx:
    image: nginx:alpine
    container_name: wastewise_nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - static_data:/var/www/static
      - media_data:/var/www/media
      - ./nginx/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    networks:
      - wastewise_network
    restart: unless-stopped

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: wastewise_prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - wastewise_network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: wastewise_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_INSTALL_PLUGINS=grafana-worldmap-panel,grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - wastewise_network
    restart: unless-stopped

  # MQTT Data Bridge (custom service for MQTT to Django)
  mqtt-bridge:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: wastewise_mqtt_bridge
    environment:
      - DEBUG=False
      - DB_NAME=wastewise
      - DB_USER=wastewise_user
      - DB_PASSWORD=wastewise_password
      - DB_HOST=postgres
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379/0
      - MQTT_BROKER_HOST=mqtt-broker
      - MQTT_BROKER_PORT=1883
    depends_on:
      - postgres
      - redis
      - mqtt-broker
      - backend
    networks:
      - wastewise_network
    restart: unless-stopped
    command: python manage.py mqtt_bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  mqtt_data:
    driver: local
  media_data:
    driver: local
  static_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  wastewise_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
